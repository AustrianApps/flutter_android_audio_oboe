// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/android_audio_oboe.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class AndroidAudioOboeBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AndroidAudioOboeBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AndroidAudioOboeBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  /// A very short-lived native function.
  ///
  /// For very short-lived functions, it is fine to call them on the main isolate.
  /// They will block the Dart execution while running the native function, so
  /// only do this for native functions which are guaranteed to be short-lived.
  int sum(int a, int b) {
    return _sum(a, b);
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  /// A longer lived native function, which occupies the thread calling it.
  ///
  /// Do not call these kind of native functions in the main isolate. They will
  /// block Dart execution. This will cause dropped frames in Flutter applications.
  /// Instead, call these native functions on a separate isolate.
  int sum_long_running(int a, int b) {
    return _sum_long_running(a, b);
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
        'sum_long_running',
      );
  late final _sum_long_running = _sum_long_runningPtr
      .asFunction<int Function(int, int)>();

  void play_beep() {
    return _play_beep();
  }

  late final _play_beepPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>(
    'play_beep',
  );
  late final _play_beep = _play_beepPtr.asFunction<void Function()>();

  void my_play_beep() {
    return _my_play_beep();
  }

  late final _my_play_beepPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('my_play_beep');
  late final _my_play_beep = _my_play_beepPtr.asFunction<void Function()>();

  void load_beep_data(ffi.Pointer<ffi.Int16> data, int size) {
    return _load_beep_data(data, size);
  }

  late final _load_beep_dataPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int16>, ffi.Int)>
      >('load_beep_data');
  late final _load_beep_data = _load_beep_dataPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int16>, int)>();

  int start_recording(
    ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Int)>
    >
    fn,
  ) {
    return _start_recording(fn);
  }

  late final _start_recordingPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<
              ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Int)
              >
            >,
          )
        >
      >('start_recording');
  late final _start_recording = _start_recordingPtr
      .asFunction<
        int Function(
          ffi.Pointer<
            ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Int)
            >
          >,
        )
      >();

  int stop_recording() {
    return _stop_recording();
  }

  late final _stop_recordingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('stop_recording');
  late final _stop_recording = _stop_recordingPtr.asFunction<int Function()>();
}
